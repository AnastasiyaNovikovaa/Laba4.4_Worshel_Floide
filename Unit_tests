#include "pch.h"
#include "CppUnitTest.h"
#include <string>
#include <fstream>
#include <vector>
#include <sstream>
#include <algorithm>
#include "..//Lab4.4_Floide_Worshel//Floide_Worshel.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;


namespace UnitTestforlaba4
{
	TEST_CLASS(UnitTestforlaba4)
	{
	public:


		TEST_METHOD(Vertices_num) {
			setlocale(LC_ALL, "rus");
			auto* vertices = new List<std::string>;
			vector<string> strings;    //создаем вектор строк
			string line;
			line = "Cанкт-Петербург;Москва;10;20";
				strings.push_back(line);
				for (int i = 0; i < strings.size(); i++) {
					getting_cities(strings[i], vertices);
				}
				auto num = vertices->get_size();
				
				Assert::IsTrue(num ==2);
		}
        TEST_METHOD(Adj_matrix)//правильность исходной матрицы
		{
			

			unsigned short** matrix;
			setlocale(LC_ALL, "rus");
			auto* vertices = new List<std::string>;
			vector<string> strings;    //создаем вектор строк
			string line1,line2,line3;
			line1 = "Cанкт-Петербург;Москва;10;20";
			line2 = "Cанкт-Петербург;Уфа;30;25";
			line3 = "Уфа;Москва;40;20";
			strings.push_back(line1); strings.push_back(line2); strings.push_back(line3);
			for (int i = 0; i < strings.size(); i++) {
				getting_cities(strings[i], vertices);
			}
			matrix = new unsigned short* [vertices->get_size()];
			make_matrix_bases(matrix, vertices->get_size());

			for (int i = 0; i < strings.size(); i++) {
				make_matrix(strings[i], vertices, matrix);
			}
			Assert::IsTrue(matrix[0][1]== 10);
		}
		TEST_METHOD( AdjMatr_diag) {
			setlocale(LC_ALL, "rus");
			auto* vertices = new List<std::string>;
			vector<string> strings;    //создаем вектор строк
			string line1, line2, line3;
			line1 = "Cанкт-Петербург;Москва;10;20";
			line2 = "Cанкт-Петербург;Уфа;30;25";
			line3 = "Уфа;Москва;40;20";
			strings.push_back(line1); strings.push_back(line2); strings.push_back(line3);
		    unsigned short** matrix;
		

			for (int i = 0; i < strings.size(); i++) {
				getting_cities(strings[i], vertices);
			}
			matrix = new unsigned short* [vertices->get_size()];
			make_matrix_bases(matrix, vertices->get_size());

			for (int i = 0; i < strings.size(); i++) {
				make_matrix(strings[i], vertices, matrix);
			}
			Assert::IsTrue(matrix[0][0]== matrix[1][1]);
		}
		TEST_METHOD( AdjMatr_NA) {
			setlocale(LC_ALL, "rus");
			auto* vertices = new List<std::string>;
			vector<string> strings;    //создаем вектор строк
			string line1, line2;
			line1 = "Cанкт-Петербург;Москва;10;20";
			line2 = "Cанкт-Петербург;Уфа;30;25";
			
			strings.push_back(line1); strings.push_back(line2); 
			unsigned short** matrix;


			for (int i = 0; i < strings.size(); i++) {
				getting_cities(strings[i], vertices);
			}
			matrix = new unsigned short* [vertices->get_size()];
			make_matrix_bases(matrix, vertices->get_size());

			for (int i = 0; i < strings.size(); i++) {
				make_matrix(strings[i], vertices, matrix);
			}

			Assert::IsTrue(matrix[1][2]== 65535);
		}
		
		TEST_METHOD( MinPath) {
			
			auto* vertices = new List<std::string>;
			unsigned short** matrix;
			unsigned short** min_paths;
			setlocale(LC_ALL, "rus");
			vector<string> strings;    //создаем вектор строк
			string line1, line2, line3;
			line1 = "Cанкт-Петербург;Москва;10;20";
			line2 = "Cанкт-Петербург;Уфа;30;25";
			line3 = "Уфа;Москва;40;10";
			strings.push_back(line1); strings.push_back(line2); strings.push_back(line3);

			for (int i = 0; i < strings.size(); i++) {
				getting_cities(strings[i], vertices);
			}
			matrix = new unsigned short* [vertices->get_size()];
			make_matrix_bases(matrix, vertices->get_size());

			for (int i = 0; i < strings.size(); i++) {
				make_matrix(strings[i], vertices, matrix);
			}

			min_paths = find_min_paths(vertices->get_size(), matrix);

			Assert::IsTrue(min_paths[0][2] < matrix[0][2]);
		}
		
		TEST_METHOD(MinPath_diag) {
			auto* vertices = new List<std::string>;
			unsigned short** matrix;
			unsigned short** min_paths;
			setlocale(LC_ALL, "rus");
			vector<string> strings;    //создаем вектор строк
			string line1, line2, line3;
			line1 = "Cанкт-Петербург;Москва;10;20";
			line2 = "Cанкт-Петербург;Уфа;30;25";
			line3 = "Уфа;Москва;40;10";
			strings.push_back(line1); strings.push_back(line2); strings.push_back(line3);

			for (int i = 0; i < strings.size(); i++) {
				getting_cities(strings[i], vertices);
			}
			matrix = new unsigned short* [vertices->get_size()];
			make_matrix_bases(matrix, vertices->get_size());

			for (int i = 0; i < strings.size(); i++) {
				make_matrix(strings[i], vertices, matrix);
			}

			min_paths = find_min_paths(vertices->get_size(), matrix);
			Assert::IsTrue(min_paths[1][1]== 65535);
		}
		
		TEST_METHOD(MinPath_NotChangePath) {
			auto* vertices = new List<std::string>;
			unsigned short** matrix;
			unsigned short** min_paths;
			setlocale(LC_ALL, "rus");
			vector<string> strings;    //создаем вектор строк
			string line1, line2, line3;
			line1 = "Cанкт-Петербург;Москва;10;20";
			line2 = "Cанкт-Петербург;Уфа;30;25";
			line3 = "Уфа;Москва;40;20";
			strings.push_back(line1); 
			strings.push_back(line2); 
			strings.push_back(line3);

			for (int i = 0; i < strings.size(); i++) {
				getting_cities(strings[i], vertices);
			}
			matrix = new unsigned short* [vertices->get_size()];
			make_matrix_bases(matrix, vertices->get_size());

			for (int i = 0; i < strings.size(); i++) {
				make_matrix(strings[i], vertices, matrix);
			}

			min_paths = find_min_paths(vertices->get_size(), matrix);
			

			Assert::IsTrue(min_paths[0][2] == matrix[0][2]);
		}

	};
}
